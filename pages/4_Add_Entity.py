#!/usr/bin/env python3
import os
from datetime import datetime, date
from typing import Any, Dict, Optional, List

import requests
import streamlit as st

from src.dashboard.tracking import inject_google_analytics

st.set_page_config(page_title="Add Entity", page_icon="üè¢", layout="wide")

inject_google_analytics(default="G-YTNYDRKJEF")

# --------------- Config & Helpers ---------------
def _get_api_url() -> str:
    try:
        return st.secrets.get("API_URL") or os.getenv("API_URL") or "https://tax-extraction-system-production.up.railway.app"
    except Exception:
        return os.getenv("API_URL") or "https://tax-extraction-system-production.up.railway.app"


API_URL = _get_api_url()


@st.cache_data(ttl=300)
def fetch_entities(search: Optional[str] = None, limit: int = 500) -> List[Dict[str, Any]]:
    try:
        params: Dict[str, Any] = {"limit": limit}
        if search:
            params["search"] = search
        r = requests.get(f"{API_URL}/api/v1/entities", params=params, timeout=12)
        if r.status_code == 200:
            return r.json().get("entities", [])
    except Exception:
        pass
    return []


def create_entity_api(entity: Dict[str, Any]) -> Dict[str, Any]:
    try:
        r = requests.post(f"{API_URL}/api/v1/entities", json=entity, timeout=20)
        if r.status_code in (200, 201):
            return r.json()
        return {"error": f"API {r.status_code}", "details": r.text}
    except Exception as e:
        return {"error": str(e)}


# --------------- Styles ---------------
if 'dark_mode' not in st.session_state:
    st.session_state.dark_mode = False

hdr1, hdr2 = st.columns([6, 1])
with hdr1:
    st.title("üè¢ Add Entity")
    st.caption(f"API: {API_URL}")
with hdr2:
    dm = st.toggle("Dark Mode", value=st.session_state.dark_mode, key="add_entity_dark_mode")
    if dm != st.session_state.dark_mode:
        st.session_state.dark_mode = dm
        st.rerun()

nav_cols = st.columns([2, 2, 6])
with nav_cols[0]:
    if hasattr(st, "page_link"):
        st.page_link("pages/3_Add_Property.py", label="Add Property", icon="‚ûï")
    else:
        st.info("Open 'Add Property' from the sidebar.")
with nav_cols[1]:
    if hasattr(st, "page_link"):
        st.page_link("pages/2_Properties.py", label="View Properties", icon="üè†")
    else:
        st.info("Open 'Properties' from the sidebar.")

st.markdown(
    """
    <style>
      .card {
        border: 1px solid #d1d5db;
        border-radius: 12px;
        background: #fbfbfb;
        box-shadow: 0 1px 3px rgba(0,0,0,0.06);
        padding: 16px;
        margin-bottom: 12px;
      }
      .card h4 { margin: 0 0 8px 0; }
      .kv { color:#555; }
      .kv b { color:#222; }
      .help { color:#6b7280; font-size: 13px; }
    </style>
    """,
    unsafe_allow_html=True
)

if st.session_state.dark_mode:
    st.markdown(
        """
        <style>
          .stApp { background: #111827; color: #e5e7eb; }
          .card { background: #1f2937; border: 1px solid #374151; box-shadow: none; }
          .kv { color: #e5e7eb; }
          .kv b { color: #f3f4f6; }
          .help { color:#9ca3af; }
        </style>
        """,
        unsafe_allow_html=True
    )

# --------------- Form ---------------
parents = fetch_entities()

st.markdown('<div class="card">', unsafe_allow_html=True)
st.subheader("Entity Details")

with st.form("create_entity_form", clear_on_submit=False):
    c1, c2 = st.columns(2)
    with c1:
        entity_name = st.text_input("Entity Name")
        entity_type = st.selectbox("Entity Type", ["Parent Entity", "Sub-Entity", "Single-Property Entity"], index=0)
        state = st.text_input("State", placeholder="e.g., TX")
        jurisdiction = st.text_input("Jurisdiction", placeholder="Optional")
        business_entity_id = st.text_input("Business Entity ID", placeholder="Optional; autogenerated if blank")
    with c2:
        st.markdown("<b>Optional Details</b>", unsafe_allow_html=True)
        extraction_steps = st.text_area("Extraction Steps (notes)", height=80)

    parent_entity_id = None
    if entity_type == "Sub-Entity":
        names = [e.get("entity_name", "Unnamed") for e in parents]
        selected_parent = st.selectbox("Parent Entity", options=names or ["No entities available"])
        if parents and selected_parent:
            for e in parents:
                if e.get("entity_name") == selected_parent:
                    parent_entity_id = e.get("entity_id")
                    break

    st.divider()
    st.subheader("Single-Property Extras")
    sp1, sp2 = st.columns(2)
    with sp1:
        account_number = st.text_input("Account Number", placeholder="Optional")
        property_address = st.text_input("Property Address", placeholder="Optional")
        tax_bill_link = st.text_input("Tax Bill Link", placeholder="https://...")
    with sp2:
        amount_due = st.number_input("Amount Due", min_value=0.0, step=100.0, format="%0.2f")
        previous_year_taxes = st.number_input("Previous Year Taxes", min_value=0.0, step=100.0, format="%0.2f")
        close_date = st.date_input("Close Date", value=None, format="MM/DD/YYYY")

    submitted = st.form_submit_button("Create Entity", type="primary")

    if submitted:
        # Validate
        if not entity_name:
            st.error("Entity Name is required")
            st.stop()
        if entity_type == "Sub-Entity" and not parent_entity_id:
            st.error("Please select a parent entity for sub-entities")
            st.stop()

        payload: Dict[str, Any] = {
            "entity_name": entity_name,
            "entity_type": entity_type.lower(),
            "state": state or None,
            "jurisdiction": jurisdiction or None,
            "parent_entity_id": parent_entity_id or None,
            "extraction_steps": extraction_steps or None,
        }
        if business_entity_id:
            payload["entity_id"] = business_entity_id

        # Only include property-related fields if the type is single-property
        if entity_type == "Single-Property Entity":
            if account_number:
                payload["account_number"] = account_number
            if property_address:
                payload["property_address"] = property_address
            if tax_bill_link:
                payload["tax_bill_link"] = tax_bill_link
            if amount_due:
                payload["amount_due"] = float(amount_due)
            if previous_year_taxes:
                payload["previous_year_taxes"] = float(previous_year_taxes)
            if isinstance(close_date, (datetime, date)):
                payload["close_date"] = close_date.isoformat()

        with st.spinner("Creating entity..."):
            result = create_entity_api(payload)

        if result.get("entity"):
            ent = result["entity"]
            st.success(f"Entity created: {ent.get('entity_name')} (ID: {ent.get('entity_id') or ent.get('id')})")
            try:
                st.balloons()
            except Exception:
                pass
            st.cache_data.clear()
        else:
            st.error(f"Failed to create entity: {result.get('error') or result.get('details') or 'Unknown error'}")

st.markdown('</div>', unsafe_allow_html=True)
